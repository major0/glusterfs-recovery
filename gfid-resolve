#!/bin/sh
#
# Resolve a GFID to the real file name in the GlusterFS file system.
#
# Rewrite of gfid-parser found available from:
#	https://gist.githubusercontent.com/semiosis/4392640
#
set -e

##
# Helper routines
error() { echo "error: $*" >&2; }
die() { echo "error: $*" >&2; exit 1; }

## file_from_inum
# @1 brick path
# @2 inum
file_from_inum() { find "${1}" -inum "${2}" ! -path '*/.glusterfs/*'; }

## file_from_gfid
# @1 brick path
# @2 gfid
#
# The .glusterfs directory in the brick root has files named by GFIDs.
#   IF: The GFID identifies a directory, then this file is a symlink to the actual
#       directory.  
#   IF: The GFID identifies a file, then this file is a hard-link to the actual file.
file_from_gfid()
{
	set -- "${1}" "${2}" "${2%${2##????}}"
	set -- "${1}" "${2}" "${1}/.glusterfs/${3%??}/${3#??}"
	set -- "$@" "${3}/${2}"
	# @1 brick path
	# @2 gfid
	# @3 gfid_prefix
	# @4 gfid_path
	test -e "${4}" || die "no such file or directory '${4}'"

	if test -h "${4}"; then
		! "${VERBOSE}" || printf "${2}:dir:"
		realpath "${3}/$(readlink "${4}")"
	else
		set -- "$@" "$(stat --printf='%i' "${4}")"
		# @5 inum
		if "${VERBOSE}"; then
			file_from_inum "${1}"  "${5}" \
				| while read FILE; do echo "${GFID}:file:${FILE}";done
		else
			file_from_inum "${1}"  "${5}"
		fi
	fi
}

##
# Code to manage the user interface
usage()
{
	if test "$#" -gt '0'; then
		error "$*"
		echo "try '${0} --help'" >&2
		exit 1
	fi
cat<<END_OF_USAGE
usage: $0 [options] <brick-path> [<gfid>]

  <brick_path>		Path to GlusterFS brick
  <gfid>		The GFID to resolve

options:
  -v, --verbose		Verbose output
  -h, --help		Display this help
 
END_OF_USAGE
exit
}

# Argument handling
VERBOSE='false'
for arg; do case "${arg}" in (-h|--help) usage;;esac;done
while test "$#" -gt "0"; do
	case "${1}" in
	(-v|--verbose)	VERBOSE='true';shift;;
	# Basic posix conformance
	(-*)	usage "unknown argument '${1}'";;
	(--)	shift; break;; # Start parsing on '--'
	(*)	break;;	# Break on unknown arguments
	esac
done
! test "$#" -gt '2' || usage 'too many arguments'
! test "$#" -lt '1' || usage 'too few arguments'

##
# Main program execution
if test "$#" -eq '2'; then
	file_from_gfid "${1}" "${2}"
	exit
fi
while read GFID; do file_from_gfid "${1}" "${GFID}"; done
